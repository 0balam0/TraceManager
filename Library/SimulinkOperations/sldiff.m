function [cInt, cData] = sldiff(sModA, sModB, sFileOut, varargin)

% init
cInt = initInt();

% select models
sModA = modelSelection(sModA);
sModB = modelSelection(sModB);
% select output file
sFileOut = outFileSelection(sFileOut);


% options
bRecDiffOnly = true; % records only properties that are different
bRecFuncOnly = true;  % records only functional properties (eliminates not functional)
if not(isempty(varargin))
    %
    s = 'differenceOnly';
    a = find(strcmp(varargin, s));
    if not(isempty(a))
        bRecDiffOnly = varargin{a+1};
    end
    %
    s = 'functionalOnly';
    a = find(strcmp(varargin, s));
    if not(isempty(a))
        bRecFuncOnly = varargin{a+1};
    end
end


% load models
[~, sModA] = fileparts(sModA);
[dum, sModB] = fileparts(sModB);
open_system(sModA); %
open_system(sModB); %
hModA = get_param(sModA, 'Handle');
hModB = get_param(sModB, 'Handle');

% compare models
cData = compare(hModA, hModB, bRecDiffOnly, bRecFuncOnly);

% save to file
if not(isempty(sFileOut))
    fid = fopen(sFileOut, 'w');
    writeCellAscii(fid, [cInt; cData], '\t', '');
    fclose(fid);
end

return

function cData = compare(hModA, hModB, bRecDiffOnly, bRecFuncOnly)

% cInt = {'item', 'propName', 'propVal-modA', 'propVal-modB', 'isequal'};
cData = initData();

% properties
cDataP = compareProperties(hModA, hModB, bRecDiffOnly, bRecFuncOnly);
cData = [cData; cDataP];

% blocks
cDataB = compareBlocks(hModA, hModB, bRecDiffOnly, bRecFuncOnly);
cData = [cData; cDataB];

return

function cData = compareProperties(hModA, hModB, bRecDiffOnly, bRecFuncOnly)

% cInt = {'item', 'propName', 'propVal-modA', 'propVal-modB', 'isequal'};
cData = initData();

% get parameters list
[tPA, bBlockPresentA] = getParamList(hModA);
[tPB, bBlockPresentB] = getParamList(hModB);

%%% property list
[cFA, cFB, cFU] = fields(tPA, tPB);
% eliminates dangerous prop (crash or misleading)
cAvoidProp = avoidPropList();
cFU = setdiff(cFU, cAvoidProp);
% eliminates not funcional properties
if bRecFuncOnly
    cNotFuncProp = notFuncPropList();
    cFU = setdiff(cFU, cNotFuncProp);
end
% some blocks absents
if (not(bBlockPresentA) && bBlockPresentB) ||...
   (bBlockPresentA && not(bBlockPresentB))
    % in case one block is absent, only first prop is left
    if bRecDiffOnly
        cFU = cFU(1);
    end
elseif not(bBlockPresentA) && not(bBlockPresentB)
    % both blocks absent
    cFU = {};
end

if bRecDiffOnly && (not(bBlockPresentA) || not(bBlockPresentB))
    cFU = cFU(1);
end

% names with full root
sModRootA = nameWithRoot(hModA);
sModRootB = nameWithRoot(hModB);

for i = 1:length(cFU)

    sF = cFU{i};
    bPropA = any(strcmpi(sF, cFA));
    bPropB = any(strcmpi(sF, cFB));
    %
    % get value fields
    [valA, sValA, bPropA] = get_val(sF, hModA, bPropA);
    [valB, sValB, bPropB] = get_val(sF, hModB, bPropB);
    %
    %
    bEqual = false;
    if bPropA && bPropB
        % property is common to both models, values are compared
        % 
        % tries with special properties (dedicated comparison)
        [bSpecProp, bEqual] = compareSpecProp(sF, hModA, hModB);
        if not(bSpecProp)
            % generic property
            if isstruct(valA) && isstruct(valB)
                bEqual = isequalStruct(valA, valB);
            else
                bEqual = isequal(valA, valB);
            end
        end
        % name
        sMod = sModRootA; 
    elseif bPropA
        %  property belongs to A model only
        sMod = sModRootA;
    elseif bPropB
        %  propetry belongs to B model only
        sMod = sModRootB;
    else
        continue
    end
    %
    
    %
    %%% update cell array of data
    % {'item', 'propName', 'propVal-modA', 'propVal-modB', 'isequal'};
    switch bRecDiffOnly
        case true
            switch(bEqual)
                case true
                    bRec = false;
                case false
                    bRec = true;
            end
        case false
            bRec = true;
    end
    %
    if bRec
        c0 = {sMod, sF, num2str(bBlockPresentA), num2str(bBlockPresentB), sValA, sValB, num2str(bEqual)};
        cData = [cData; c0];
    end
end

return

function cData = compareBlocks(hModA, hModB, bRecDiffOnly, bRecFuncOnly)

% cInt = {'item', 'propName', 'propVal-modA', 'propVal-modB', 'isequal'};
cData = initData();

tPA = get(hModA);
if (isempty(tPA))
    tPA = struct();
end
tPB = get(hModB);
if (isempty(tPB))
    tPB = struct();
end


% extract blocks, if any (to be checked)
cBlocksA = {};
cBlocksB = {};
if isfield(tPA, 'Blocks')
    cBlocksA = sort(get(hModA, 'Blocks'));
end
if isfield(tPB, 'Blocks')
    cBlocksB = sort(get(hModB, 'Blocks'));
end
cBlocksU = sort(union(cBlocksA, cBlocksB));

for i = 1:length(cBlocksU)
    sF = cBlocksU{i};
    % in case name contains '/', name is corrected to double "//"
    sF0 = modelPathCorrection(sF);
    sModPartA = [nameFullPath(hModA), '/', sF0];
    sModPartB = [nameFullPath(hModB), '/', sF0];
    if any(strcmpi(cBlocksA, sF))
        hModPartA = get_param(sModPartA, 'Handle');
    else
        hModPartA = [];
    end
    if any(strcmpi(cBlocksB, sF))
        hModPartB = get_param(sModPartB, 'Handle');
    else
        hModPartB = [];
    end
    %
    % compare parts
    c0 = compare(hModPartA, hModPartB, bRecDiffOnly, bRecFuncOnly);
    % update
    cData = [cData; c0];
end

return

function [bSpecProp, bEqual] = compareSpecProp(sF, hModA, hModB)

% comapares special properties using dedicated criteria

% init
bSpecProp = true;

% switch according to property type
switch sF
    case 'Lines'
        bEqual = compareLines(get(hModA, 'Lines'), get(hModB, 'Lines'));
    otherwise
        bEqual = false;
        bSpecProp = false;
end


return

function bEqual = compareLines(tLA, tLB)

% init
bEqual = true;

% check line numbers
if not(isequal(length(tLA),length(tLB)))
    bEqual = false;
    return
end

for i = 1:length(tLA)
    
    %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
    % compare sources
    %
    % compare source names (handles are different anyway)
        
    sSourceNameA = get_param(tLA(i).SrcBlock, 'Name');
    sSourceNameB = get_param(tLB(i).SrcBlock, 'Name');
    sourcePortA = tLA(i).SrcPort;
    sourcePortB = tLB(i).SrcPort;
    sParTypeA = get_param(tLA(i).Parent, 'Type');
    sParTypeB = get_param(tLB(i).Parent, 'Type');
    
    if strcmp(sParTypeA, 'line') && strcmp(sParTypeB, 'line')
        % lines are branches: look for their parent and compare final
        % parent (connections are already checked when checking the primitives lines)
        sA = lineSourceName(tLA(i).Handle);
        sB = lineSourceName(tLB(i).Handle);
        if not(isequal(sA, sB))
            bEqual = false;
            return
        end
        
    elseif not(strcmp(sParTypeA, 'line')) && not(strcmp(sParTypeB, 'line'))
        % lines are primitives (not branch): compare connections
        if not(isequal(sSourceNameA, sSourceNameB))
            bEqual = false;
            return
        end
        %
        % compare source port
        if not(isequal(sourcePortA, sourcePortB))
            bEqual = false;
            return
        end
    else
        % mixed
        bEqual = false;
        return
    end
    
    
    
    %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
    % compare destination
    %
    hDstBlockA = tLA(i).DstBlock;
    hDstBlockB = tLB(i).DstBlock';
    tBranchA = tLA(i).Branch;
    tBranchB = tLB(i).Branch;
    %
    if (not(isempty(hDstBlockA)) && not(isempty(hDstBlockB)))
        % destinations are blocks: compare blocks and ports
        % compare destination names (handles are different anyway)
        sDstNameA = get_param(tLA(i).DstBlock, 'Name');
        sDstNameB = get_param(tLB(i).DstBlock, 'Name');
        if not(isequal(sDstNameA, sDstNameB))
            bEqual = false;
            return
        end
        
        % compare destination port
        if not(isequal(tLA(i).DstPort, tLB(i).DstPort))
            bEqual = false;
            return
        end
        
    elseif not(isempty(tBranchA)) && not(isempty(tBranchB))
        % destinations are branches: compare branches lines
        bEqual = compareLines(tLA(i).Branch, tLB(i).Branch);
        
    elseif isempty(hDstBlockA) && isempty(hDstBlockB) &&...
            isempty(tBranchA) && isempty(tBranchA)
        % both unconnected lines, ok
        
    else
        % mixed situation (branches + lines)
        bEqual = false;
        return
    end
    
end



return

function [tPA, bBlockPresentA] = getParamList(hModA)

tPA = get(hModA);
bBlockPresentA = true;
if isempty(tPA)
    tPA = struct();
    bBlockPresentA = false;
end



return

function sBlockName = lineSourceName(hLine)

% extracts name of block from which a line originates
hPar = hLine;

% goes back to primitive line
while 1
    hPar0 = get_param(hPar, 'Parent');
    sParType = get_param(hPar0, 'Type');
    if not(strcmpi(sParType, 'line'))
        % parent is a subsystem or a model diagram
        % parent handle is not updated
        break
    else
        % parent is another line, update parent handle
        hPar = hPar0;
    end
end

% gets name of source block
hScr = get_param(hPar, 'SrcBlockHandle');
sBlockName = get_param(hScr, 'Name');

return

function [valA, sValA, bPropA] = get_val(sF, hModA, bPropA)
% get value fields

valA = [];
sValA = '';
if bPropA
    try
        valA = get(hModA, sF);
        sValA = val2str(valA);
        if not(isempty(sValA))
            % replace C format characts
            sValA = strrep(sValA, char(9), '_');
            sValA = strrep(sValA, char(10), '_');
            sValA = strrep(sValA, char(13), '_');
        end
    catch
        bPropA = false;
    end
end
return
           
function cData = initData()
            
            cInt = initInt();
            cData = cell(0, size(cInt,2));
            
            return

function cInt = initInt()

cInt = {'block', 'propertyName', 'containedInModelA', 'containedInModelB', 'propertyValue-ModelA', 'propertyValue-ModelB', 'isEqual'};

return

function [cFA, cFB, cFU] = fields(tPA, tPB)

cFA = sort(fieldnames(tPA));
cFB = sort(fieldnames(tPB));
cFU = sort(union(cFA, cFB));

return

function sVal = val2str(val)
% conversion to string

sVal = [];
if not(isempty(val))
    if isnumeric(val)
        sVal = num2str(val);
    elseif ischar(val)
        sVal = val;
    elseif iscell(val)
        sVal = cell2string(val, '; ');
    elseif isstruct(val)
        sVal = 'structure';
    end
end
return

function sModA = nameFullPath(hModA)

sModA = modelPathCorrection(get(hModA, 'Name'));
if not(isequal(get(hModA, 'type'), 'block_diagram'))
    sPar = get(hModA, 'parent');
    sModA = [sPar, '/', sModA];
end

return

function sMod = nameWithRoot(hModA)

sModA = nameFullPath(hModA);

if isequal(get(hModA, 'type'), 'block_diagram') % isroot
    sMod = 'ROOT';
else
    a = strfind(sModA, '/');
    a = a(1);
    sMod = ['ROOT/', sModA(a+1:end)];
end
return

function cNotFuncProp = notFuncPropList()

% properties that do not determine changes in simulation
cNotFuncProp = {'AccelMakeCommand';...
    'AccelSystemTargetFile';...
    'AccelTemplateMakefile';...
    'AccelVerboseBuild';...
    'AlgebraicLoopMsg';...
    'AnalyticLinearization';...
    'ArrayBoundsChecking';...
    'ArtificialAlgebraicLoopMsg';...
    'AssertControl';...
    'AssertionControl';...
    'AutoInsertRateTranBlk';...
    'AutosarCompliant';...
    'BlockDescriptionStringDataTip';...
    'BlockNameDataTip';...
    'BlockParametersDataTip';...
    'BlockPriorityViolationMsg';...
    'BlockReduction';...
    'BlockReductionOpt';...
    'BooleanDataType';...
    'BooleansAsBitfields';...
    'BrowserLookUnderMasks';...
    'BrowserShowLibraryLinks';...
    'BufferReusableBoundary';...
    'BufferReuse';...
    'BusObjectLabelMismatch';...
    'Capabilities';...
    'CPPClassGenCompliant';...
    'CheckExecutionContextPreStartOutputMsg';...
    'CheckExecutionContextRuntimeOutputMsg';...
    'CheckForMatrixSingularity';...
    'CheckMatrixSingularityMsg';...
    'CheckMdlBeforeBuild';...
    'CheckModelReferenceTargetMessage';...
    'CheckSSInitialOutputMsg';...
    'CloseFcn';...
    'CodeGenDirectory';...
    'CombineOutputUpdateFcns';...
    'Comment';...
    'CompOptLevelCompliant';...
    'CompileForInfoOnSignalBasedLinearization';...
    'ConditionallyExecuteInputs';...
    'ConfigAtBuild';...
    'ConfigurationManager';...
    'ConfigurationMode';...
    'ConfigurationScript';...
    'ConsecutiveZCsStepRelTol';...
    'ConsistencyChecking';...
    'CovCompData';...
    'CovCumulativeReport';...
    'CovCumulativeVarName';...
    'CovExternalEMLEnable';...
    'CovForceBlockReductionOff';...
    'CovHTMLOptions';...
    'CovHtmlReporting';...
    'CovMetricSettings';...
    'CovModelRefEnable';...
    'CovModelRefExcluded';...
    'CovNameIncrementing';...
    'CovPath';...
    'CovReportOnPause';...
    'CovSaveName';...
    'CovSaveSingleToWorkspaceVar';...
    'Created';...
    'Creator';...
    'CurrentBlock';...
    'CurrentOutputPort';...
    'CustomCommentsFcn';...
    'CustomHeaderCode';...
    'CustomInclude';...
    'CustomInitializer';...
    'CustomLibrary';...
    'CustomSource';...
    'CustomSourceCode';...
    'CustomSymbolStrBlkIO';...
    'CustomSymbolStrFcn';...
    'CustomSymbolStrFcnArg';...
    'CustomSymbolStrField';...
    'CustomSymbolStrGlobalVar';...
    'CustomSymbolStrMacro';...
    'CustomSymbolStrTmpVar';...
    'CustomSymbolStrType';...
    'CustomTerminator';...
    'DataBitsets';...
    'DataTypeOverride';...
    'Decimation';...
    'DefineNamingFcn';...
    'DefineNamingRule';...
    'DeleteChildFcn';...
    'Description';...
    'Dirty';...
    'DiscreteInheritContinuousMsg';...
    'DisplayBdSearchResults';...
    'DisplayBlockIO';...
    'DisplayCECTree';...
    'DisplayCallgraphDominators';...
    'DisplayCompileStats';...
    'DisplayErrorDirections';...
    'DisplayInvisibleSources';...
    'DisplaySortedLists';...
    'DisplayVectPropagationResults';...
    'DisplayVectorAndFunctionCounts';...
    'ERTCustomFileBanners';...
    'ERTFirstTimeCompliant';...
    'ERTMultiwordLength';...
    'ERTMultiwordTypeDef';...
    'Echo';...
    'EfficientFloat2IntCast';...
    'EfficientMapNaN2IntZero';...
'EnableCustomComments';...
'EnableMemcpy';...
'EnableOverflowDetection';...
'EnforceIntegerDowncast';...
'EnhancedBackFolding';...
'EvaledLifeSpan';...
'ExecutionContextIcon';...
'ExpressionFolding';...
'ExtMode';...
'ExtModeAddSuffixToVar';...
'ExtModeArchiveDirName';...
'ExtModeArchiveFileName';...
'ExtModeArchiveMode';...
'ExtModeArmWhenConnect';...
'ExtModeAutoIncOneShot';...
'ExtModeAutoUpdateStatusClock';...
'ExtModeBatchMode';...
'ExtModeChangesPending';...
'ExtModeConnected';...
'ExtModeEnableFloating';...
'ExtModeIncDirWhenArm';...
'ExtModeIntrfLevel';...
'ExtModeLastArchiveFile';...
'ExtModeLogAll';...
'ExtModeLogCtrlPanelDlg';...
'ExtModeMexArgs';...
'ExtModeMexFile';...
'ExtModeNumTargetStepsPending';...
'ExtModeOpenProtocolUploadingEqualLengthVectors';...
'ExtModeParamChangesPending';...
'ExtModeParamVectName';...
'ExtModeSkipChecksumValidation';...
'ExtModeSkipDownloadWhenConnect';...
'ExtModeStaticAlloc';...
'ExtModeStaticAllocSize';...
'ExtModeTesting';...
'ExtModeTransport';...
'ExtModeTrigDelay';...
'ExtModeTrigDirection';...
'ExtModeTrigDuration';...
'ExtModeTrigDurationFloating';...
'ExtModeTrigElement';...
'ExtModeTrigHoldOff';...
'ExtModeTrigLevel';...
'ExtModeTrigMode';...
'ExtModeTrigPort';...
'ExtModeTrigType';...
'ExtModeUploadStatus';...
'ExtModeWriteAllDataToWs';...
'ExternalInput';...
'ExtrapolationOrder';...
'FcnCallInpInsideContextMsg';...
'FileName';...
'FinalStateName';...
'FixPtInfo';...
'FixedStep';...
'FixptConstOverflowMsg';...
'FixptConstPrecisionLossMsg';...
'FixptConstUnderflowMsg';...
'FoldNonRolledExpr';...
'FollowLinksWhenOpeningFromGotoBlocks';...
'ForceArrayBoundsChecking';...
'ForceConsistencyChecking';...
'ForceModelCoverage';...
'ForceParamTrailComments';...
'ForwardingTable';...
'ForwardingTableString';...
'GenCodeOnly';...
'GenerateASAP2';...
'GenerateClassInterface';...
'GenerateCodeInfo';...
'GenerateComments';...
'GenerateFullHeader';...
'GenerateMakefile';...
'GeneratePreprocessorConditionals';...
'GenerateReport';...
'GenerateSampleERTMain';...
'GenerateTestInterfaces';...
'GenerateTraceInfo';...
'GenerateTraceReport';...
'GenerateTraceReportEml';...
'GenerateTraceReportSf';...
'GenerateTraceReportSl';...
'GridSpacing';...
'Handle';...
'HiliteAncestors';...
'HiliteFcnCallInpInsideContext';...
'IgnoreBidirectionalLines';...
'IgnoreCustomStorageClasses';...
'IgnoreTestpoints';...
'IncAutoGenComments';...
'IncDataTypeInIds';...
'IncHierarchyInIds';...
'IncludeBusHierarchyInRTWFileBlockHierarchyMap';...
'IncludeERTFirstTime';...
'IncludeFileDelimiter';...
'IncludeHyperlinkInReport';...
'IncludeMdlTerminateFcn';...
'IncludeRegionsInRTWFileBlockHierarchyMap';...
'IncludeRootSignalInRTWFile';...
'IncludeVirtualBlocksInRTWFileBlockHierarchyMap';...
'InheritedTsInSrcMsg';...
'InitFcn';...
'InitFltsAndDblsToZero';...
'InitialState';...
'InitialStep';...
'InjectionData';...
'InlineInvariantSignals';...
'InlineParams';...
'InlinedPrmAccess';...
'InsertBlockDesc';...
'InsertRTBMode';...
'InspectSignalLogs';...
'Int32ToFloatConvMsg';...
'IntegerOverflowMsg';...
'InvalidFcnCallConnMsg';...
'IsERTTarget';...
'IsPILTarget';...
'Jacobian';...
'LaunchReport';...
'LibraryLinkDisplay';...
'LibraryType';...
'LifeSpan';...
'LimitDataPoints';...
'LinearizationMsg';...
'LoadExternalInput';...
'LoadInitialState';...
'LocalBlockOutputs';...
'Location';...
'Lock';...
'LogVarNameModifier';...
'LoggingUnavailableSignals';...
'MakeCommand';...
'MangleLength';...
'MatFileLogging';...
'MaxConsecutiveMinStep';...
'MaxConsecutiveZCs';...
'MaxConsecutiveZCsMsg';...
'MaxDataPoints';...
'MaxIdLength';...
'MaxMDLFileLineLength';...
'MaxNumMinSteps';...
'MaxOrder';...
'MaxStep';...
'MemcpyThreshold';...
'MergeDetectMultiDrivingBlocksExec';...
'Metadata';...
'MinMaxOverflowArchiveData';...
'MinMaxOverflowArchiveMode';...
'MinMaxOverflowLogging';...
'MinStep';...
'MinStepSizeMsg';...
'ModelBrowserVisibility';...
'ModelBrowserWidth';...
'ModelDataFile';...
'ModelDependencies';...
'ModelReferenceCSMismatchMessage';...
'ModelReferenceCompliant';...
'ModelReferenceDataLoggingMessage';...
'ModelReferenceExtraNoncontSigs';...
'ModelReferenceIOMismatchMessage';...
'ModelReferenceIOMsg';...
'ModelReferenceMinAlgLoopOccurrences';...
'ModelReferenceNumInstancesAllowed';...
'ModelReferencePassRootInputsByReference';...
'ModelReferenceSimTargetType';...
'ModelReferenceSimTargetVerbose';...
'ModelReferenceSymbolNameMessage';...
'ModelReferenceTargetType';...
'ModelReferenceVersionMismatchMessage';...
'ModelStepFunctionPrototypeControlCompliant';...
'ModelWorkspace';...
'MultiInstanceERTCode';...
'MultiTaskCondExecSysMsg';...
'MultiTaskDSMMsg';...
'MultiTaskRateTransMsg';...
'MultiwordLength';...
'NoFixptDivByZeroProtection';...
'NumberNewtonIterations';...
'ObjectivePriorities';...
'Open';...
'OptimizeBlockIOStorage';...
'OptimizeModelRefInitCode';...
'OutputOption';...
'OutputSaveName';...
'OutputTimes';...
'PaperOrientation';...
'PaperPosition';...
'PaperPositionMode';...
'PaperSize';...
'PaperType';...
'PaperUnits';...
'ParMdlRefBuildCompliant';...
'ParamNamingFcn';...
'ParamNamingRule';...
'ParamWorkspaceSource';...
'ParameterArgumentNames';...
'ParameterDowncastMsg';...
'ParameterOverflowMsg';...
'ParameterPrecisionLossMsg';...
'ParameterTunabilityLossMsg';...
'ParameterUnderflowMsg';...
'Parent'
'ParenthesesLevel';...
'PassReuseOutputArgsAs';...
'PassReuseOutputArgsThreshold';...
'PortableWordSizes';...
'PortConnectivity';...  % should be controlled by Lines property
'PositivePriorityOrder';...
'PreserveName';...
'PreserveNameWithParent';...
'ProcessScript';...
'ProcessScriptMode';...
'ProdBitPerChar';...
'ProdBitPerInt';...
'ProdBitPerLong';...
'ProdBitPerShort';...
'ProdEndianess';...
'ProdEqTarget';...
'ProdHWDeviceType';...
'ProdHWWordLengths';...
'ProdIntDivRoundTo';...
'ProdShiftRightIntArith';...
'ProdWordSize';...
'Profile';...
'ProfileTLC';...
'PurelyIntegerCode';...
'RTPrefix';...
'RTWBuildArgs';...
'RTWBuildDirRoot';...
'RTWCAPIParams';...
'RTWCAPISignals';...
'RTWCAPIStates';...
'RTWCompilerOptimization';...
'RTWCustomCompilerOptimizations';...
'RTWGenSettings';...
'RTWGenerateCodeOnly';...
'RTWInlineParameters';...
'RTWMakeCommand';...
'RTWModifiedTimeStamp';...
'RTWOptions';...
'RTWRetainRTWFile';...
'RTWSystemCodeInlineAuto';...
'RTWSystemTargetFile';...
'RTWTemplateMakefile';...
'RTWUseLocalCustomCode';...
'RTWUseSimCustomCode';...
'RTWVerbose';...
'ReadBeforeWriteMsg';...
'RecordCoverage';...
'Refine';...
'ReportName';...
'ReqHilite';...
'ReqsInCode';...
'RequirementInfo';...
'ReservedNameArray';...
'RetainRTWFile';...
'ReturnWorkspaceOutputs';...
'RollThreshold';...
'RootOutportRequireBusObject';...
'SFDataObjDesc';...
'SFSimEcho';...
'SFSimEnableDebug';...
'SFSimOverflowDetection';...
'SFcnCompatibilityMsg';...
'SampleTimeAnnotations';...
'SampleTimeColors';...
'SaveCompleteFinalSimState';...
'SaveDefaultBlockParams';...
'SaveFinalState';...
'SaveFormat';...
'SaveLog';...
'SaveOutput';...
'SaveState';...
'SaveTime';...
'SaveWithDisabledLinksMsg';...
'SaveWithParameterizedLinksMsg';...
'SavedCharacterEncoding';...
'ScreenColor';...
'ScrollbarOffset';...
'Selected';...
'SfunCompatibilityCheckMsg';...
'ShapePreserveControl';...
'ShowEliminatedStatement';...
'ShowGrid';...
'ShowLineDimensions';...
'ShowLineDimensionsOnError';...
'ShowLinearizationAnnotations';...
'ShowLoopsOnError';...
'ShowModelReferenceBlockIO';...
'ShowModelReferenceBlockVersion';...
'ShowPageBoundaries';...
'ShowPortDataTypes';...
'ShowPortDataTypesOnError';...
'ShowSignalResolutionIcons';...
'ShowStorageClass';...
'ShowTestPointIcons';...
'ShowViewerIcons';...
'Shown';...
'SigSpecEnsureSampleTimeMsg';...
'SignalBasedLinearization';...
'SignalInfNanChecking';...
'SignalLabelMismatchMsg';...
'SignalLogging';...
'SignalLoggingName';...
'SignalLoggingSaveFormat';...
'SignalNamingFcn';...
'SignalNamingRule';...
'SignalRangeChecking';...
'SignalResolutionControl';...
'SimBlas';...
'SimBuildMode';...
'SimCompilerOptimization';...
'SimCtrlC';...
'SimCustomHeaderCode';...
'SimCustomInitializer';...
'SimCustomSourceCode';...
'SimCustomTerminator';...
'SimExtrinsic';...
'SimIntegrity';...
'SimReservedNameArray';...
'SimStateInterfaceChecksumMismatchMsg';...
'SimUseLocalCustomCode';...
'SimUserIncludeDirs';...
'SimUserLibraries';...
'SimUserSources';...
'SimulationMode';...
'SimulationStatus';...
'SimulationTime';...
'SimulinkBlockComments';...
'SimulinkDataObjDesc';...
'SingleTaskRateTransMsg';...
'Solver';...
'SolverMode';...
'SolverName';...
'SolverPrmCheckMsg';...
'SolverResetMethod';...
'SolverType';...
'SortedOrder';...
'StartFcn';...
'StartTime';...
'StateBitsets';...
'StateNameClashWarn';...
'StateSaveName';...
'StatusBar';...
'StopFcn';...
'StopTime';...
'StrengthReduction';...
'StrictBusMsg';...
'SupportAbsoluteTime';...
'SupportComplex';...
'SupportContinuousTime';...
'SupportNonFinite';...
'SupportNonInlinedSFcns';...
'SupportVariableSizeSignals';...
'SuppressErrorStatus';...
'SystemCodeInlineAuto';...
'SystemTargetFile';...
'TLCAssert';...
'TLCAssertion';...
'TLCCoverage';...
'TLCDebug';...
'TLCOptions';...
'TLCProfiler';...
'Tag';...
'TargetBitPerChar';...
'TargetBitPerInt';...
'TargetBitPerLong';...
'TargetBitPerShort';...
'TargetEndianess';...
'TargetFcnLib';...
'TargetFunctionLibrary';...
'TargetHWDeviceType';...
'TargetIntDivRoundTo';...
'TargetLang';...
'TargetLibSuffix';...
'TargetPreCompLibLocation';...
'TargetPreprocMaxBitsSint';...
'TargetPreprocMaxBitsUint';...
'TargetShiftRightIntArith';...
'TargetTypeEmulationWarnSuppressLevel';...
'TargetWordSize';...
'TasksWithSamePriorityMsg';...
'TemplateMakefile';...
'TiledPageScale';...
'TiledPaperMargins';...
'TimeAdjustmentMsg';...
'TimeSaveName';...
'ToolBar';...
'TryForcingSFcnDF';...
'TunableVars';...
'TunableVarsStorageClass';...
'TunableVarsTypeQualifier';...
'UnconnectedInputMsg';...
'UnconnectedLineMsg';...
'UnconnectedOutputMsg';...
'UnderSpecifiedDataTypeMsg';...
'UnderspecifiedInitializationDetection';...
'UniqueDataStoreMsg';...
'UnknownTsInhSupMsg';...
'UnnecessaryDatatypeConvMsg';...
'UpdateHistory';...
'UpdateModelReferenceTargets';...
'UseAnalysisPorts';...
'UseIntDivNetSlope';...
'UseSimReservedNames';...
'UseTempVars';...
'UtilityFuncGeneration';...
'VectorMatrixConversionMsg';...
'WideLines';...
'WriteAfterReadMsg';...
'WriteAfterWriteMsg';...
'ZcThreshold';...
'ZeroCrossAlgorithm';...
'ZeroCrossControl';...
'ZeroExternalMemoryAtStartup';...
'ZeroInternalMemoryAtStartup';...
'ZoomFactor';...
'covSaveCumulativeToWorkspaceVar'};


return

function cProp = avoidPropList()
% properties to be always avoided in check (cause crasher or change
% randomly)

cProp = {'UserData';...
    'Handle';...            % 
    'LineHandles';...       % handles change randomly in models
    'PortHandles';...       % handles change randomly in Simulink
    'ExtModeLoggingSupported';... % causa crash 2009b
    'Capabilities';...
    'Path'};
return

function sModA = modelSelection(sModA)

if isempty(sModA)
    sModA = uigetfile({'*.mdl'; '*.slx'}, 'select Simulink model A...');
end
[dum, sModA] = fileparts(sModA);

return

function sFileOut = outFileSelection(sFileOut)

if isempty(sFileOut)
    [sF, sP] = uiputfile('*.txt', 'select report file...');
    sFileOut = fullfile(sP, sF);
end

return

