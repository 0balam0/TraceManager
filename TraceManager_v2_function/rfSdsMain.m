function [varargout] = rfSdsMain(sFunc, varargin)
% smistatore di funzioni chiamabili esternamente. Smista verso le raccolte di 
% funzioni dedicate "rfSdsXXX"
%
% esempio: [a,b] = rfSdsMain('prova', 10,5);
%   è come [a,b] = prova(10,5)
% a patto che si specifichi in "switch sFunc" il file esterno "rfSdsXXX" 
% dove andare a cercare la funzione "prova"

%---specifico in quale file esterno "rdSdsXXX" si trova la funzione sFunc
nOut = nargout;
% FOR COMPILATION REASONS, DO NOT REMOVE THE FOLLOWING LINES  ("PRAGMA")
% IF YOU REFER TO SOME MORE rfSdsXXX FUNCTIONS, please update the %#function
% LINE, CONTINUING ON THE SAME LINE
%#function rfSdsInterpolazione, rfSdsInizializzazione, rfSdsOther, rfSdsSim, rfSdsTune, rfSdsPCode, rfSdsStatic, rfSdsConversione rfSdsHybrid rfSdsAirCooling

if any(strcmp(sFunc, {'Interpolazione_Compr', 'Interpolazione_Cond', 'Interpolazione_Evp', 'Interpolazione_Vlv','Interpolazione_Cit','Interpolazione_Fan',...
                      'modello_cabina'}))
      sRfFunc = 'rfSdsAirCooling'; 


elseif strfindB(lower(sFunc),'interpolazione_hyb') || ...
      any(strcmp(sFunc, {'addHybParam','isHybrid', ...
                      'addHybridData','whichHybrid','inerziaFAS'}));
   
      sRfFunc = 'rfSdsHybrid';

elseif strfindB(lower(sFunc),'interpolazione') || ...
   any(strcmp(sFunc, {'generazioneCoppiaMotore', 'satura',...
                      'frictionTemp','scegliStrategiaCuna','creaGruppi','trovaGruppi',...
                      'effMech','mappatura','defaultPDMpwr','defaultPDM',...
                      'mappaturaEGR','ricalcoloNOx','ricalcoloSoot','stimaLambda','abbattimentoNOx','estraiDatiPQM'}));
    sRfFunc = 'rfSdsInterpolazione'; 
    
elseif strfindB(lower(sFunc),'inizializzazione') ||...
      any(strcmp(sFunc, {'generazioneCoppiaMotore','completaParametriManovra','leggiFilesApplicazione','interpolaFilesApplicazione',...
                         'filesInVhc','leggiFilesApplicazione','esportaGSM','esportaPDM','esportaGBM','esportaTrsDrag'}))
    sRfFunc = 'rfSdsInizializzazione';
    
elseif any(strcmp(sFunc, {'simulazione','setRec','cutTH','addTH','writeTHascii','selectTH','resetTH','cutFileName','ctrlSmkBp',...
                         'addFieldsTH','filtTH','roundTH','man2mod', 'calcolo', 'modFieldsTH','interpolaTH',...
                         'writeCellAscii','writeMatAscii','writeStructAscii','writePerfFile','addSimData','steadyFieldsTH',...
                         'historyTimeFields','historySampleTime'}));
    sRfFunc = 'rfSdsSim';
    
elseif any(strcmp(sFunc, {'zvectSdl','corrEngPerf','corrDissGbx','descrizTH',...
                          'gest_lightOff','commonWorkspace','specificWorkspace',...
                          'sManovra', 'riconosciCiclo','vettoriCambio','variabiliDaPrj','parametroManovre',...
                          'heatTransferCorrelations','coeffScambioTermico3','proprietaMateriali'...
                          'massaCat'}));
   sRfFunc = 'rfSdsTune';
   
elseif any(strcmp(sFunc, {'verifica_licenza','verPerf','mappaEGRdefault','mappaEGRref','mappaSOImaindefault','datiTLG','datiWU3','datiFCT'}))
   sRfFunc = 'rfSdsPCode';
   
elseif any(strcmp(sFunc, {'engAvlPerf','inerziaVeicoloEquivalente','coastDownRes','vehDyn','vehDyn2',...
                          'dissipazioneCambio','staticCalculations','calc_CVAccMax'}))
   sRfFunc = 'rfSdsStatic';
   
elseif any(strcmp(sFunc, {'Cdiss2effGbx','Fumo2conc','soot2conc','Fumo2opacity','Fumo2soot','conc2Fumo','soot2Fumo','opacity2Fumo'...
                          'lambda2egr','egr2lambda','visc2loss','mapPw2Tq',...
                          'pm2torque','torque2pm','power2torque','torque2power','pm2power','power2pm',...
                          'dmdt2m','m2dmdt','pm2eff','eff2pm','m2bsfc',...
                          'quota2pendenza','pendenza2quota','kDiss2eff','eff2kDiss','transConst',...
                          'ext2File','file2Ext','CV2kW','listaTipiFiles',...
                          'mainUm2Um','massFlowUm2Um','massUm2Um','speedUm2Um','lengthUm2Um','pressureUm2Um','torqueUm2Um','powerUm2Um',...
                          'xMass2xMol','xMol2xMass'}))
    sRfFunc = 'rfSdsConversione';
else
    sRfFunc = 'rfSdsOther';
end
%---chiamo la funzione selezionata---
hRfFunc = str2func(sRfFunc);
[varargout{1:nOut}] = hRfFunc(sFunc, nOut, varargin{:}); 
return